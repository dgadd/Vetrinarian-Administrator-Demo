using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Configuration;
using System.Text;
using Iesi.Collections.Generic;
using OldProject.ORM.Repository.NHibernateRepositories;

namespace OldProject.ORM.Repository
{
    public class RepositoryFactory
    {
        PersistenceMechanismEnum _persistenceMechanismFromAppConfig;

        public RepositoryFactory()
        {
            try
            {
                NameValueCollection appSettings = ConfigurationManager.AppSettings;
                string persistenceMechanismAppSetting = "NHibernate"; // 2007Aug24 Broken--maybe looking for client web.config??? appSettings["PersistenceMechanism"];
                _persistenceMechanismFromAppConfig = (PersistenceMechanismEnum)Enum.Parse(typeof(PersistenceMechanismEnum), persistenceMechanismAppSetting);
            }
            catch
            {
                throw new Exception("Setting the PersistenceMechanismEnum from App.Config failed.");
            }
        }

        #region properties and enums
        public enum PersistenceMechanismEnum
        {
            NHibernate,
            None
        }

        public IMultiObjectGraphRepository MultiObjectGraphRepository
        {
            get
            {
                IMultiObjectGraphRepository selectedMultiObjectGraphRepository = null;

                switch (_persistenceMechanismFromAppConfig)
                {
                    case PersistenceMechanismEnum.NHibernate:
                        selectedMultiObjectGraphRepository = new MultiObjectGraphRepositoryNHibernate();
                        break;
                    case PersistenceMechanismEnum.None:
                        // do nothing
                        break;
                }

                return selectedMultiObjectGraphRepository;
            }
        }

        public IBusinessAssociateTypeRepository BusinessAssociateTypeRepository
        {
            get
            {
                IBusinessAssociateTypeRepository selectedBusinessAssociateTypeRepository = null;

                switch (_persistenceMechanismFromAppConfig)
                {
                    case PersistenceMechanismEnum.NHibernate:
                        selectedBusinessAssociateTypeRepository = new BusinessAssociateTypeRepositoryNHibernate();
                        break;
                    case PersistenceMechanismEnum.None:
                        // do nothing
                        break;
                }

                return selectedBusinessAssociateTypeRepository;
            }
        }

        public IBusinessAssociateRepository BusinessAssociateRepository
        {
            get
            {
                IBusinessAssociateRepository selectedBusinessAssociateRepository = null;

                switch (_persistenceMechanismFromAppConfig)
                {
                    case PersistenceMechanismEnum.NHibernate:
                        selectedBusinessAssociateRepository = new BusinessAssociateRepositoryNHibernate();
                        break;
                    case PersistenceMechanismEnum.None:
                        // do nothing
                        break;
                }

                return selectedBusinessAssociateRepository;
            }
        }

        public IAddressRepository AddressRepository
        {
            get
            {
                IAddressRepository selectedAddressRepository = null;

                switch (_persistenceMechanismFromAppConfig)
                {
                    case PersistenceMechanismEnum.NHibernate:
                        selectedAddressRepository = new AddressRepositoryNHibernate();
                        break;
                    case PersistenceMechanismEnum.None:
                        // do nothing
                        break;
                }

                return selectedAddressRepository;
            }
        }

        public ICreditCardTypeRepository CreditCardTypeRepository
        {
            get
            {
                ICreditCardTypeRepository selectedCreditCardTypeRepository = null;

                switch (_persistenceMechanismFromAppConfig)
                {
                    case PersistenceMechanismEnum.NHibernate:
                        selectedCreditCardTypeRepository = new CreditCardTypeRepositoryNHibernate();
                        break;
                    case PersistenceMechanismEnum.None:
                        // do nothing
                        break;
                }

                return selectedCreditCardTypeRepository;
            }
        }

        public ICreditCardRepository CreditCardRepository
        {
            get
            {
                ICreditCardRepository selectedCreditCardRepository = null;

                switch (_persistenceMechanismFromAppConfig)
                {
                    case PersistenceMechanismEnum.NHibernate:
                        selectedCreditCardRepository = new CreditCardRepositoryNHibernate();
                        break;
                    case PersistenceMechanismEnum.None:
                        // do nothing
                        break;
                }

                return selectedCreditCardRepository;
            }
        }

        public IPADNnnnTypeRepository PADNnnnTypeRepository
        {
            get
            {
                IPADNnnnTypeRepository selectedPADNnnnTypeRepository = null;

                switch (_persistenceMechanismFromAppConfig)
                {
                    case PersistenceMechanismEnum.NHibernate:
                        selectedPADNnnnTypeRepository = new PADNnnnTypeRepositoryNHibernate();
                        break;
                    case PersistenceMechanismEnum.None:
                        // do nothing
                        break;
                }

                return selectedPADNnnnTypeRepository;
            }
        }

        public IPreAuthorizedDebitRepository PreAuthorizedDebitRepository
        {
            get
            {
                IPreAuthorizedDebitRepository selectedPreAuthorizedDebitRepository = null;

                switch (_persistenceMechanismFromAppConfig)
                {
                    case PersistenceMechanismEnum.NHibernate:
                        selectedPreAuthorizedDebitRepository = new PreAuthorizedDebitRepositoryNHibernate();
                        break;
                    case PersistenceMechanismEnum.None:
                        // do nothing
                        break;
                }

                return selectedPreAuthorizedDebitRepository;
            }
        }

        public INnnnRepository NnnnRepository
        {
            get
            {
                INnnnRepository selectedNnnnRepository = null;

                switch (_persistenceMechanismFromAppConfig)
                {
                    case PersistenceMechanismEnum.NHibernate:
                        selectedNnnnRepository = new NnnnRepositoryNHibernate();
                        break;
                    case PersistenceMechanismEnum.None:
                        // do nothing
                        break;
                }

                return selectedNnnnRepository;
            }
        }

        public IPaymentMethodRepository PaymentMethodRepository
        {
            get
            {
                IPaymentMethodRepository selectedPaymentMethodRepository = null;

                switch (_persistenceMechanismFromAppConfig)
                {
                    case PersistenceMechanismEnum.NHibernate:
                        selectedPaymentMethodRepository = new PaymentMethodRepositoryNHibernate();
                        break;
                    case PersistenceMechanismEnum.None:
                        // do nothing
                        break;
                }

                return selectedPaymentMethodRepository;
            }
        }

        public IPayOnAmountRepository PayOnAmountRepository
        {
            get
            {
                IPayOnAmountRepository selectedPayOnAmountRepository = null;

                switch (_persistenceMechanismFromAppConfig)
                {
                    case PersistenceMechanismEnum.NHibernate:
                        selectedPayOnAmountRepository = new PayOnAmountRepositoryNHibernate();
                        break;
                    case PersistenceMechanismEnum.None:
                        // do nothing
                        break;
                }

                return selectedPayOnAmountRepository;
            }
        }

        public ICityProvinceRepository CityProvinceRepository
        {
            get
            {
                ICityProvinceRepository selectedCityProvinceRepository = null;

                switch (_persistenceMechanismFromAppConfig)
                {
                    case PersistenceMechanismEnum.NHibernate:
                        selectedCityProvinceRepository = new CityProvinceRepositoryNHibernate();
                        break;
                    case PersistenceMechanismEnum.None:
                        // do nothing
                        break;
                }

                return selectedCityProvinceRepository;
            }
        }

        public IInventoryLocationRepository InventoryLocationRepository
        {
            get
            {
                IInventoryLocationRepository selectedInventoryLocationRepository = null;

                switch (_persistenceMechanismFromAppConfig)
                {
                    case PersistenceMechanismEnum.NHibernate:
                        selectedInventoryLocationRepository = new InventoryLocationRepositoryNHibernate();
                        break;
                    case PersistenceMechanismEnum.None:
                        // do nothing
                        break;
                }

                return selectedInventoryLocationRepository;
            }
        }

        public IBranchRepository BranchRepository
        {
            get
            {
                IBranchRepository selectedBranchRepository = null;

                switch (_persistenceMechanismFromAppConfig)
                {
                    case PersistenceMechanismEnum.NHibernate:
                        selectedBranchRepository = new BranchRepositoryNHibernate();
                        break;
                    case PersistenceMechanismEnum.None:
                        // do nothing
                        break;
                }

                return selectedBranchRepository;
            }
        }

        public ILotTypeRepository LotTypeRepository
        {
            get
            {
                ILotTypeRepository selectedLotTypeRepository = null;

                switch (_persistenceMechanismFromAppConfig)
                {
                    case PersistenceMechanismEnum.NHibernate:
                        selectedLotTypeRepository = new LotTypeRepositoryNHibernate();
                        break;
                    case PersistenceMechanismEnum.None:
                        // do nothing
                        break;
                }

                return selectedLotTypeRepository;
            }
        }

        public ILISLotRepository LISLotRepository
        {
            get
            {
                ILISLotRepository selectedLISLotRepository = null;

                switch (_persistenceMechanismFromAppConfig)
                {
                    case PersistenceMechanismEnum.NHibernate:
                        selectedLISLotRepository = new LISLotRepositoryNHibernate();
                        break;
                    case PersistenceMechanismEnum.None:
                        // do nothing
                        break;
                }

                return selectedLISLotRepository;
            }
        }

        public IBranchBankRepository BranchBankRepository
        {
            get
            {
                IBranchBankRepository selectedBranchBankRepository = null;

                switch (_persistenceMechanismFromAppConfig)
                {
                    case PersistenceMechanismEnum.NHibernate:
                        selectedBranchBankRepository = new BranchBankRepositoryNHibernate();
                        break;
                    case PersistenceMechanismEnum.None:
                        // do nothing
                        break;
                }

                return selectedBranchBankRepository;
            }
        }

        public ILotRepository LotRepository
        {
            get
            {
                ILotRepository selectedLotRepository = null;

                switch (_persistenceMechanismFromAppConfig)
                {
                    case PersistenceMechanismEnum.NHibernate:
                        selectedLotRepository = new LotRepositoryNHibernate();
                        break;
                    case PersistenceMechanismEnum.None:
                        // do nothing
                        break;
                }

                return selectedLotRepository;
            }
        }

        public IMultiLotGroupRepository MultiLotGroupRepository
        {
            get
            {
                IMultiLotGroupRepository selectedMultiLotGroupRepository = null;

                switch (_persistenceMechanismFromAppConfig)
                {
                    case PersistenceMechanismEnum.NHibernate:
                        selectedMultiLotGroupRepository = new MultiLotGroupRepositoryNHibernate();
                        break;
                    case PersistenceMechanismEnum.None:
                        // do nothing
                        break;
                }

                return selectedMultiLotGroupRepository;
            }
        }

        public ILotLevelRepository LotLevelRepository
        {
            get
            {
                ILotLevelRepository selectedLotLevelRepository = null;

                switch (_persistenceMechanismFromAppConfig)
                {
                    case PersistenceMechanismEnum.NHibernate:
                        selectedLotLevelRepository = new LotLevelRepositoryNHibernate();
                        break;
                    case PersistenceMechanismEnum.None:
                        // do nothing
                        break;
                }

                return selectedLotLevelRepository;
            }
        }

        public ILotStallRepository LotStallRepository
        {
            get
            {
                ILotStallRepository selectedLotStallRepository = null;

                switch (_persistenceMechanismFromAppConfig)
                {
                    case PersistenceMechanismEnum.NHibernate:
                        selectedLotStallRepository = new LotStallRepositoryNHibernate();
                        break;
                    case PersistenceMechanismEnum.None:
                        // do nothing
                        break;
                }

                return selectedLotStallRepository;
            }
        }

        public ILotSectionRepository LotSectionRepository
        {
            get
            {
                ILotSectionRepository selectedLotSectionRepository = null;

                switch (_persistenceMechanismFromAppConfig)
                {
                    case PersistenceMechanismEnum.NHibernate:
                        selectedLotSectionRepository = new LotSectionRepositoryNHibernate();
                        break;
                    case PersistenceMechanismEnum.None:
                        // do nothing
                        break;
                }

                return selectedLotSectionRepository;
            }
        }

        public ISignageTypeRepository SignageTypeRepository
        {
            get
            {
                ISignageTypeRepository selectedSignageTypeRepository = null;

                switch (_persistenceMechanismFromAppConfig)
                {
                    case PersistenceMechanismEnum.NHibernate:
                        selectedSignageTypeRepository = new SignageTypeRepositoryNHibernate();
                        break;
                    case PersistenceMechanismEnum.None:
                        // do nothing
                        break;
                }

                return selectedSignageTypeRepository;
            }
        }

        public IBillingFrequencyRepository BillingFrequencyRepository
        {
            get
            {
                IBillingFrequencyRepository selectedBillingFrequencyRepository = null;

                switch (_persistenceMechanismFromAppConfig)
                {
                    case PersistenceMechanismEnum.NHibernate:
                        selectedBillingFrequencyRepository = new BillingFrequencyRepositoryNHibernate();
                        break;
                    case PersistenceMechanismEnum.None:
                        // do nothing
                        break;
                }

                return selectedBillingFrequencyRepository;
            }
        }

        public IRateTypeRepository RateTypeRepository
        {
            get
            {
                IRateTypeRepository selectedRateTypeRepository = null;

                switch (_persistenceMechanismFromAppConfig)
                {
                    case PersistenceMechanismEnum.NHibernate:
                        selectedRateTypeRepository = new RateTypeRepositoryNHibernate();
                        break;
                    case PersistenceMechanismEnum.None:
                        // do nothing
                        break;
                }

                return selectedRateTypeRepository;
            }
        }

        public IRateClassRepository RateClassRepository
        {
            get
            {
                IRateClassRepository selectedRateClassRepository = null;

                switch (_persistenceMechanismFromAppConfig)
                {
                    case PersistenceMechanismEnum.NHibernate:
                        selectedRateClassRepository = new RateClassRepositoryNHibernate();
                        break;
                    case PersistenceMechanismEnum.None:
                        // do nothing
                        break;
                }

                return selectedRateClassRepository;
            }
        }

        public ILotRateCodeRepository LotRateCodeRepository
        {
            get
            {
                ILotRateCodeRepository selectedLotRateCodeRepository = null;

                switch (_persistenceMechanismFromAppConfig)
                {
                    case PersistenceMechanismEnum.NHibernate:
                        selectedLotRateCodeRepository = new LotRateCodeRepositoryNHibernate();
                        break;
                    case PersistenceMechanismEnum.None:
                        // do nothing
                        break;
                }

                return selectedLotRateCodeRepository;
            }
        }

        public IAgreementTypeRepository AgreementTypeRepository
        {
            get
            {
                IAgreementTypeRepository selectedAgreementTypeRepository = null;

                switch (_persistenceMechanismFromAppConfig)
                {
                    case PersistenceMechanismEnum.NHibernate:
                        selectedAgreementTypeRepository = new AgreementTypeRepositoryNHibernate();
                        break;
                    case PersistenceMechanismEnum.None:
                        // do nothing
                        break;
                }

                return selectedAgreementTypeRepository;
            }
        }

        public IAgreementBillToRepository AgreementBillToRepository
        {
            get
            {
                IAgreementBillToRepository selectedAgreementBillToRepository = null;

                switch (_persistenceMechanismFromAppConfig)
                {
                    case PersistenceMechanismEnum.NHibernate:
                        selectedAgreementBillToRepository = new AgreementBillToRepositoryNHibernate();
                        break;
                    case PersistenceMechanismEnum.None:
                        // do nothing
                        break;
                }

                return selectedAgreementBillToRepository;
            }
        }

        public IDepositRefundedToRepository DepositRefundedToRepository
        {
            get
            {
                IDepositRefundedToRepository selectedDepositRefundedToRepository = null;

                switch (_persistenceMechanismFromAppConfig)
                {
                    case PersistenceMechanismEnum.NHibernate:
                        selectedDepositRefundedToRepository = new DepositRefundedToRepositoryNHibernate();
                        break;
                    case PersistenceMechanismEnum.None:
                        // do nothing
                        break;
                }

                return selectedDepositRefundedToRepository;
            }
        }

        public IAgreementRepository AgreementRepository
        {
            get
            {
                IAgreementRepository selectedAgreementRepository = null;

                switch (_persistenceMechanismFromAppConfig)
                {
                    case PersistenceMechanismEnum.NHibernate:
                        selectedAgreementRepository = new AgreementRepositoryNHibernate();
                        break;
                    case PersistenceMechanismEnum.None:
                        // do nothing
                        break;
                }

                return selectedAgreementRepository;
            }
        }

        public IAgreementTermRepository AgreementTermRepository
        {
            get
            {
                IAgreementTermRepository selectedAgreementTermRepository = null;

                switch (_persistenceMechanismFromAppConfig)
                {
                    case PersistenceMechanismEnum.NHibernate:
                        selectedAgreementTermRepository = new AgreementTermRepositoryNHibernate();
                        break;
                    case PersistenceMechanismEnum.None:
                        // do nothing
                        break;
                }

                return selectedAgreementTermRepository;
            }
        }

        public IDiscountTypeRepository DiscountTypeRepository
        {
            get
            {
                IDiscountTypeRepository selectedDiscountTypeRepository = null;

                switch (_persistenceMechanismFromAppConfig)
                {
                    case PersistenceMechanismEnum.NHibernate:
                        selectedDiscountTypeRepository = new DiscountTypeRepositoryNHibernate();
                        break;
                    case PersistenceMechanismEnum.None:
                        // do nothing
                        break;
                }

                return selectedDiscountTypeRepository;
            }
        }

        public ILotPromotionRepository LotPromotionRepository
        {
            get
            {
                ILotPromotionRepository selectedLotPromotionRepository = null;

                switch (_persistenceMechanismFromAppConfig)
                {
                    case PersistenceMechanismEnum.NHibernate:
                        selectedLotPromotionRepository = new LotPromotionRepositoryNHibernate();
                        break;
                    case PersistenceMechanismEnum.None:
                        // do nothing
                        break;
                }

                return selectedLotPromotionRepository;
            }
        }

        public IAssignmentRepository AssignmentRepository
        {
            get
            {
                IAssignmentRepository selectedAssignmentRepository = null;

                switch (_persistenceMechanismFromAppConfig)
                {
                    case PersistenceMechanismEnum.NHibernate:
                        selectedAssignmentRepository = new AssignmentRepositoryNHibernate();
                        break;
                    case PersistenceMechanismEnum.None:
                        // do nothing
                        break;
                }

                return selectedAssignmentRepository;
            }
        }

        public IExpiryReasonRepository ExpiryReasonRepository
        {
            get
            {
                IExpiryReasonRepository selectedExpiryReasonRepository = null;

                switch (_persistenceMechanismFromAppConfig)
                {
                    case PersistenceMechanismEnum.NHibernate:
                        selectedExpiryReasonRepository = new ExpiryReasonRepositoryNHibernate();
                        break;
                    case PersistenceMechanismEnum.None:
                        // do nothing
                        break;
                }

                return selectedExpiryReasonRepository;
            }
        }

        public IInvoiceRepository InvoiceRepository
        {
            get
            {
                IInvoiceRepository selectedInvoiceRepository = null;

                switch (_persistenceMechanismFromAppConfig)
                {
                    case PersistenceMechanismEnum.NHibernate:
                        selectedInvoiceRepository = new InvoiceRepositoryNHibernate();
                        break;
                    case PersistenceMechanismEnum.None:
                        // do nothing
                        break;
                }

                return selectedInvoiceRepository;
            }
        }

        public INnnnTransactionTypeRepository NnnnTransactionTypeRepository
        {
            get
            {
                INnnnTransactionTypeRepository selectedNnnnTransactionTypeRepository = null;

                switch (_persistenceMechanismFromAppConfig)
                {
                    case PersistenceMechanismEnum.NHibernate:
                        selectedNnnnTransactionTypeRepository = new NnnnTransactionTypeRepositoryNHibernate();
                        break;
                    case PersistenceMechanismEnum.None:
                        // do nothing
                        break;
                }

                return selectedNnnnTransactionTypeRepository;
            }
        }

        public IGLBatchRepository GLBatchRepository
        {
            get
            {
                IGLBatchRepository selectedGLBatchRepository = null;

                switch (_persistenceMechanismFromAppConfig)
                {
                    case PersistenceMechanismEnum.NHibernate:
                        selectedGLBatchRepository = new GLBatchRepositoryNHibernate();
                        break;
                    case PersistenceMechanismEnum.None:
                        // do nothing
                        break;
                }

                return selectedGLBatchRepository;
            }
        }

        public INnnnTransactionRepository NnnnTransactionRepository
        {
            get
            {
                INnnnTransactionRepository selectedNnnnTransactionRepository = null;

                switch (_persistenceMechanismFromAppConfig)
                {
                    case PersistenceMechanismEnum.NHibernate:
                        selectedNnnnTransactionRepository = new NnnnTransactionRepositoryNHibernate();
                        break;
                    case PersistenceMechanismEnum.None:
                        // do nothing
                        break;
                }

                return selectedNnnnTransactionRepository;
            }
        }

        public IAcctTransChargeDetailRepository AcctTransChargeDetailRepository
        {
            get
            {
                IAcctTransChargeDetailRepository selectedAcctTransChargeDetailRepository = null;

                switch (_persistenceMechanismFromAppConfig)
                {
                    case PersistenceMechanismEnum.NHibernate:
                        selectedAcctTransChargeDetailRepository = new AcctTransChargeDetailRepositoryNHibernate();
                        break;
                    case PersistenceMechanismEnum.None:
                        // do nothing
                        break;
                }

                return selectedAcctTransChargeDetailRepository;
            }
        }

        public IAcctTransTaxDetailRepository AcctTransTaxDetailRepository
        {
            get
            {
                IAcctTransTaxDetailRepository selectedAcctTransTaxDetailRepository = null;

                switch (_persistenceMechanismFromAppConfig)
                {
                    case PersistenceMechanismEnum.NHibernate:
                        selectedAcctTransTaxDetailRepository = new AcctTransTaxDetailRepositoryNHibernate();
                        break;
                    case PersistenceMechanismEnum.None:
                        // do nothing
                        break;
                }

                return selectedAcctTransTaxDetailRepository;
            }
        }

        public ITaxTypeRepository TaxTypeRepository
        {
            get
            {
                ITaxTypeRepository selectedTaxTypeRepository = null;

                switch (_persistenceMechanismFromAppConfig)
                {
                    case PersistenceMechanismEnum.NHibernate:
                        selectedTaxTypeRepository = new TaxTypeRepositoryNHibernate();
                        break;
                    case PersistenceMechanismEnum.None:
                        // do nothing
                        break;
                }

                return selectedTaxTypeRepository;
            }
        }

        public IAppliedPaymentRepository AppliedPaymentRepository
        {
            get
            {
                IAppliedPaymentRepository selectedAppliedPaymentRepository = null;

                switch (_persistenceMechanismFromAppConfig)
                {
                    case PersistenceMechanismEnum.NHibernate:
                        selectedAppliedPaymentRepository = new AppliedPaymentRepositoryNHibernate();
                        break;
                    case PersistenceMechanismEnum.None:
                        // do nothing
                        break;
                }

                return selectedAppliedPaymentRepository;
            }
        }

        public IAccessDeviceTypeRepository AccessDeviceTypeRepository
        {
            get
            {
                IAccessDeviceTypeRepository selectedAccessDeviceTypeRepository = null;

                switch (_persistenceMechanismFromAppConfig)
                {
                    case PersistenceMechanismEnum.NHibernate:
                        selectedAccessDeviceTypeRepository = new AccessDeviceTypeRepositoryNHibernate();
                        break;
                    case PersistenceMechanismEnum.None:
                        // do nothing
                        break;
                }

                return selectedAccessDeviceTypeRepository;
            }
        }

        public IAccessDeviceRepository AccessDeviceRepository
        {
            get
            {
                IAccessDeviceRepository selectedAccessDeviceRepository = null;

                switch (_persistenceMechanismFromAppConfig)
                {
                    case PersistenceMechanismEnum.NHibernate:
                        selectedAccessDeviceRepository = new AccessDeviceRepositoryNHibernate();
                        break;
                    case PersistenceMechanismEnum.None:
                        // do nothing
                        break;
                }

                return selectedAccessDeviceRepository;
            }
        }

        public ILotRateAccessDeviceRequiredRepository LotRateAccessDeviceRequiredRepository
        {
            get
            {
                ILotRateAccessDeviceRequiredRepository selectedLotRateAccessDeviceRequiredRepository = null;

                switch (_persistenceMechanismFromAppConfig)
                {
                    case PersistenceMechanismEnum.NHibernate:
                        selectedLotRateAccessDeviceRequiredRepository = new LotRateAccessDeviceRequiredRepositoryNHibernate();
                        break;
                    case PersistenceMechanismEnum.None:
                        // do nothing
                        break;
                }

                return selectedLotRateAccessDeviceRequiredRepository;
            }
        }

        public IParkerRepository ParkerRepository
        {
            get
            {
                IParkerRepository selectedParkerRepository = null;

                switch (_persistenceMechanismFromAppConfig)
                {
                    case PersistenceMechanismEnum.NHibernate:
                        selectedParkerRepository = new ParkerRepositoryNHibernate();
                        break;
                    case PersistenceMechanismEnum.None:
                        // do nothing
                        break;
                }

                return selectedParkerRepository;
            }
        }

        public IAccessDeviceDepositRepository AccessDeviceDepositRepository
        {
            get
            {
                IAccessDeviceDepositRepository selectedAccessDeviceDepositRepository = null;

                switch (_persistenceMechanismFromAppConfig)
                {
                    case PersistenceMechanismEnum.NHibernate:
                        selectedAccessDeviceDepositRepository = new AccessDeviceDepositRepositoryNHibernate();
                        break;
                    case PersistenceMechanismEnum.None:
                        // do nothing
                        break;
                }

                return selectedAccessDeviceDepositRepository;
            }
        }

        public IDeliveryMethodRepository DeliveryMethodRepository
        {
            get
            {
                IDeliveryMethodRepository selectedDeliveryMethodRepository = null;

                switch (_persistenceMechanismFromAppConfig)
                {
                    case PersistenceMechanismEnum.NHibernate:
                        selectedDeliveryMethodRepository = new DeliveryMethodRepositoryNHibernate();
                        break;
                    case PersistenceMechanismEnum.None:
                        // do nothing
                        break;
                }

                return selectedDeliveryMethodRepository;
            }
        }

        public IRefundPaymentMethodRepository RefundPaymentMethodRepository
        {
            get
            {
                IRefundPaymentMethodRepository selectedRefundPaymentMethodRepository = null;

                switch (_persistenceMechanismFromAppConfig)
                {
                    case PersistenceMechanismEnum.NHibernate:
                        selectedRefundPaymentMethodRepository = new RefundPaymentMethodRepositoryNHibernate();
                        break;
                    case PersistenceMechanismEnum.None:
                        // do nothing
                        break;
                }

                return selectedRefundPaymentMethodRepository;
            }
        }

        public IAssignmentAccessDeviceRepository AssignmentAccessDeviceRepository
        {
            get
            {
                IAssignmentAccessDeviceRepository selectedAssignmentAccessDeviceRepository = null;

                switch (_persistenceMechanismFromAppConfig)
                {
                    case PersistenceMechanismEnum.NHibernate:
                        selectedAssignmentAccessDeviceRepository = new AssignmentAccessDeviceRepositoryNHibernate();
                        break;
                    case PersistenceMechanismEnum.None:
                        // do nothing
                        break;
                }

                return selectedAssignmentAccessDeviceRepository;
            }
        }

        public ILotAccessDeviceTypeRepository LotAccessDeviceTypeRepository
        {
            get
            {
                ILotAccessDeviceTypeRepository selectedLotAccessDeviceTypeRepository = null;

                switch (_persistenceMechanismFromAppConfig)
                {
                    case PersistenceMechanismEnum.NHibernate:
                        selectedLotAccessDeviceTypeRepository = new LotAccessDeviceTypeRepositoryNHibernate();
                        break;
                    case PersistenceMechanismEnum.None:
                        // do nothing
                        break;
                }

                return selectedLotAccessDeviceTypeRepository;
            }
        }

        public IDeviceStatusRepository DeviceStatusRepository
        {
            get
            {
                IDeviceStatusRepository selectedDeviceStatusRepository = null;

                switch (_persistenceMechanismFromAppConfig)
                {
                    case PersistenceMechanismEnum.NHibernate:
                        selectedDeviceStatusRepository = new DeviceStatusRepositoryNHibernate();
                        break;
                    case PersistenceMechanismEnum.None:
                        // do nothing
                        break;
                }

                return selectedDeviceStatusRepository;
            }
        }

        public IInventoryStatusRepository InventoryStatusRepository
        {
            get
            {
                IInventoryStatusRepository selectedInventoryStatusRepository = null;

                switch (_persistenceMechanismFromAppConfig)
                {
                    case PersistenceMechanismEnum.NHibernate:
                        selectedInventoryStatusRepository = new InventoryStatusRepositoryNHibernate();
                        break;
                    case PersistenceMechanismEnum.None:
                        // do nothing
                        break;
                }

                return selectedInventoryStatusRepository;
            }
        }

        public IAccessDeviceStatusRepository AccessDeviceStatusRepository
        {
            get
            {
                IAccessDeviceStatusRepository selectedAccessDeviceStatusRepository = null;

                switch (_persistenceMechanismFromAppConfig)
                {
                    case PersistenceMechanismEnum.NHibernate:
                        selectedAccessDeviceStatusRepository = new AccessDeviceStatusRepositoryNHibernate();
                        break;
                    case PersistenceMechanismEnum.None:
                        // do nothing
                        break;
                }

                return selectedAccessDeviceStatusRepository;
            }
        }

        public ICustomerAccessDeviceDefaultRepository CustomerAccessDeviceDefaultRepository
        {
            get
            {
                ICustomerAccessDeviceDefaultRepository selectedCustomerAccessDeviceDefaultRepository = null;

                switch (_persistenceMechanismFromAppConfig)
                {
                    case PersistenceMechanismEnum.NHibernate:
                        selectedCustomerAccessDeviceDefaultRepository = new CustomerAccessDeviceDefaultRepositoryNHibernate();
                        break;
                    case PersistenceMechanismEnum.None:
                        // do nothing
                        break;
                }

                return selectedCustomerAccessDeviceDefaultRepository;
            }
        }

        public IBranchAccessDeviceTypeRepository BranchAccessDeviceTypeRepository
        {
            get
            {
                IBranchAccessDeviceTypeRepository selectedBranchAccessDeviceTypeRepository = null;

                switch (_persistenceMechanismFromAppConfig)
                {
                    case PersistenceMechanismEnum.NHibernate:
                        selectedBranchAccessDeviceTypeRepository = new BranchAccessDeviceTypeRepositoryNHibernate();
                        break;
                    case PersistenceMechanismEnum.None:
                        // do nothing
                        break;
                }

                return selectedBranchAccessDeviceTypeRepository;
            }
        }

        public ITaxableItemTypeRepository TaxableItemTypeRepository
        {
            get
            {
                ITaxableItemTypeRepository selectedTaxableItemTypeRepository = null;

                switch (_persistenceMechanismFromAppConfig)
                {
                    case PersistenceMechanismEnum.NHibernate:
                        selectedTaxableItemTypeRepository = new TaxableItemTypeRepositoryNHibernate();
                        break;
                    case PersistenceMechanismEnum.None:
                        // do nothing
                        break;
                }

                return selectedTaxableItemTypeRepository;
            }
        }

        public ITaxRateTypeRepository TaxRateTypeRepository
        {
            get
            {
                ITaxRateTypeRepository selectedTaxRateTypeRepository = null;

                switch (_persistenceMechanismFromAppConfig)
                {
                    case PersistenceMechanismEnum.NHibernate:
                        selectedTaxRateTypeRepository = new TaxRateTypeRepositoryNHibernate();
                        break;
                    case PersistenceMechanismEnum.None:
                        // do nothing
                        break;
                }

                return selectedTaxRateTypeRepository;
            }
        }

        public ITaxRateRepository TaxRateRepository
        {
            get
            {
                ITaxRateRepository selectedTaxRateRepository = null;

                switch (_persistenceMechanismFromAppConfig)
                {
                    case PersistenceMechanismEnum.NHibernate:
                        selectedTaxRateRepository = new TaxRateRepositoryNHibernate();
                        break;
                    case PersistenceMechanismEnum.None:
                        // do nothing
                        break;
                }

                return selectedTaxRateRepository;
            }
        }

        public ILotPostalZipCodeRepository LotPostalZipCodeRepository
        {
            get
            {
                ILotPostalZipCodeRepository selectedLotPostalZipCodeRepository = null;

                switch (_persistenceMechanismFromAppConfig)
                {
                    case PersistenceMechanismEnum.NHibernate:
                        selectedLotPostalZipCodeRepository = new LotPostalZipCodeRepositoryNHibernate();
                        break;
                    case PersistenceMechanismEnum.None:
                        // do nothing
                        break;
                }

                return selectedLotPostalZipCodeRepository;
            }
        }

        public IBranchTaxTypeRepository BranchTaxTypeRepository
        {
            get
            {
                IBranchTaxTypeRepository selectedBranchTaxTypeRepository = null;

                switch (_persistenceMechanismFromAppConfig)
                {
                    case PersistenceMechanismEnum.NHibernate:
                        selectedBranchTaxTypeRepository = new BranchTaxTypeRepositoryNHibernate();
                        break;
                    case PersistenceMechanismEnum.None:
                        // do nothing
                        break;
                }

                return selectedBranchTaxTypeRepository;
            }
        }

        public IBranchSignageTypeRepository BranchSignageTypeRepository
        {
            get
            {
                IBranchSignageTypeRepository selectedBranchSignageTypeRepository = null;

                switch (_persistenceMechanismFromAppConfig)
                {
                    case PersistenceMechanismEnum.NHibernate:
                        selectedBranchSignageTypeRepository = new BranchSignageTypeRepositoryNHibernate();
                        break;
                    case PersistenceMechanismEnum.None:
                        // do nothing
                        break;
                }

                return selectedBranchSignageTypeRepository;
            }
        }

        public IBusinessAssociateTaxDetailRepository BusinessAssociateTaxDetailRepository
        {
            get
            {
                IBusinessAssociateTaxDetailRepository selectedBusinessAssociateTaxDetailRepository = null;

                switch (_persistenceMechanismFromAppConfig)
                {
                    case PersistenceMechanismEnum.NHibernate:
                        selectedBusinessAssociateTaxDetailRepository = new BusinessAssociateTaxDetailRepositoryNHibernate();
                        break;
                    case PersistenceMechanismEnum.None:
                        // do nothing
                        break;
                }

                return selectedBusinessAssociateTaxDetailRepository;
            }
        }

        public ITierTypeRepository TierTypeRepository
        {
            get
            {
                ITierTypeRepository selectedTierTypeRepository = null;

                switch (_persistenceMechanismFromAppConfig)
                {
                    case PersistenceMechanismEnum.NHibernate:
                        selectedTierTypeRepository = new TierTypeRepositoryNHibernate();
                        break;
                    case PersistenceMechanismEnum.None:
                        // do nothing
                        break;
                }

                return selectedTierTypeRepository;
            }
        }

        public IPriceTypeRepository PriceTypeRepository
        {
            get
            {
                IPriceTypeRepository selectedPriceTypeRepository = null;

                switch (_persistenceMechanismFromAppConfig)
                {
                    case PersistenceMechanismEnum.NHibernate:
                        selectedPriceTypeRepository = new PriceTypeRepositoryNHibernate();
                        break;
                    case PersistenceMechanismEnum.None:
                        // do nothing
                        break;
                }

                return selectedPriceTypeRepository;
            }
        }

        public IFinalProrationMethodRepository FinalProrationMethodRepository
        {
            get
            {
                IFinalProrationMethodRepository selectedFinalProrationMethodRepository = null;

                switch (_persistenceMechanismFromAppConfig)
                {
                    case PersistenceMechanismEnum.NHibernate:
                        selectedFinalProrationMethodRepository = new FinalProrationMethodRepositoryNHibernate();
                        break;
                    case PersistenceMechanismEnum.None:
                        // do nothing
                        break;
                }

                return selectedFinalProrationMethodRepository;
            }
        }

        public IInitialProrationMethodRepository InitialProrationMethodRepository
        {
            get
            {
                IInitialProrationMethodRepository selectedInitialProrationMethodRepository = null;

                switch (_persistenceMechanismFromAppConfig)
                {
                    case PersistenceMechanismEnum.NHibernate:
                        selectedInitialProrationMethodRepository = new InitialProrationMethodRepositoryNHibernate();
                        break;
                    case PersistenceMechanismEnum.None:
                        // do nothing
                        break;
                }

                return selectedInitialProrationMethodRepository;
            }
        }

        public ILotRateScheduleRepository LotRateScheduleRepository
        {
            get
            {
                ILotRateScheduleRepository selectedLotRateScheduleRepository = null;

                switch (_persistenceMechanismFromAppConfig)
                {
                    case PersistenceMechanismEnum.NHibernate:
                        selectedLotRateScheduleRepository = new LotRateScheduleRepositoryNHibernate();
                        break;
                    case PersistenceMechanismEnum.None:
                        // do nothing
                        break;
                }

                return selectedLotRateScheduleRepository;
            }
        }

        public IAssignmentRateScheduleRepository AssignmentRateScheduleRepository
        {
            get
            {
                IAssignmentRateScheduleRepository selectedAssignmentRateScheduleRepository = null;

                switch (_persistenceMechanismFromAppConfig)
                {
                    case PersistenceMechanismEnum.NHibernate:
                        selectedAssignmentRateScheduleRepository = new AssignmentRateScheduleRepositoryNHibernate();
                        break;
                    case PersistenceMechanismEnum.None:
                        // do nothing
                        break;
                }

                return selectedAssignmentRateScheduleRepository;
            }
        }

        public IAssignmentStallRepository AssignmentStallRepository
        {
            get
            {
                IAssignmentStallRepository selectedAssignmentStallRepository = null;

                switch (_persistenceMechanismFromAppConfig)
                {
                    case PersistenceMechanismEnum.NHibernate:
                        selectedAssignmentStallRepository = new AssignmentStallRepositoryNHibernate();
                        break;
                    case PersistenceMechanismEnum.None:
                        // do nothing
                        break;
                }

                return selectedAssignmentStallRepository;
            }
        }

        public IAssignmentParkerRepository AssignmentParkerRepository
        {
            get
            {
                IAssignmentParkerRepository selectedAssignmentParkerRepository = null;

                switch (_persistenceMechanismFromAppConfig)
                {
                    case PersistenceMechanismEnum.NHibernate:
                        selectedAssignmentParkerRepository = new AssignmentParkerRepositoryNHibernate();
                        break;
                    case PersistenceMechanismEnum.None:
                        // do nothing
                        break;
                }

                return selectedAssignmentParkerRepository;
            }
        }

        public IAgreementRateScheduleRepository AgreementRateScheduleRepository
        {
            get
            {
                IAgreementRateScheduleRepository selectedAgreementRateScheduleRepository = null;

                switch (_persistenceMechanismFromAppConfig)
                {
                    case PersistenceMechanismEnum.NHibernate:
                        selectedAgreementRateScheduleRepository = new AgreementRateScheduleRepositoryNHibernate();
                        break;
                    case PersistenceMechanismEnum.None:
                        // do nothing
                        break;
                }

                return selectedAgreementRateScheduleRepository;
            }
        }

        public ISuspensionProrationMethodRepository SuspensionProrationMethodRepository
        {
            get
            {
                ISuspensionProrationMethodRepository selectedSuspensionProrationMethodRepository = null;

                switch (_persistenceMechanismFromAppConfig)
                {
                    case PersistenceMechanismEnum.NHibernate:
                        selectedSuspensionProrationMethodRepository = new SuspensionProrationMethodRepositoryNHibernate();
                        break;
                    case PersistenceMechanismEnum.None:
                        // do nothing
                        break;
                }

                return selectedSuspensionProrationMethodRepository;
            }
        }

        public ILotDetailRepository LotDetailRepository
        {
            get
            {
                ILotDetailRepository selectedLotDetailRepository = null;

                switch (_persistenceMechanismFromAppConfig)
                {
                    case PersistenceMechanismEnum.NHibernate:
                        selectedLotDetailRepository = new LotDetailRepositoryNHibernate();
                        break;
                    case PersistenceMechanismEnum.None:
                        // do nothing
                        break;
                }

                return selectedLotDetailRepository;
            }
        }

        public IBranchDetailRepository BranchDetailRepository
        {
            get
            {
                IBranchDetailRepository selectedBranchDetailRepository = null;

                switch (_persistenceMechanismFromAppConfig)
                {
                    case PersistenceMechanismEnum.NHibernate:
                        selectedBranchDetailRepository = new BranchDetailRepositoryNHibernate();
                        break;
                    case PersistenceMechanismEnum.None:
                        // do nothing
                        break;
                }

                return selectedBranchDetailRepository;
            }
        }

        public IProcessTrackerRepository ProcessTrackerRepository
        {
            get
            {
                IProcessTrackerRepository selectedProcessTrackerRepository = null;

                switch (_persistenceMechanismFromAppConfig)
                {
                    case PersistenceMechanismEnum.NHibernate:
                        selectedProcessTrackerRepository = new ProcessTrackerRepositoryNHibernate();
                        break;
                    case PersistenceMechanismEnum.None:
                        // do nothing
                        break;
                }

                return selectedProcessTrackerRepository;
            }
        }

        public IOperatingCompanyDetailRepository OperatingCompanyDetailRepository
        {
            get
            {
                IOperatingCompanyDetailRepository selectedOperatingCompanyDetailRepository = null;

                switch (_persistenceMechanismFromAppConfig)
                {
                    case PersistenceMechanismEnum.NHibernate:
                        selectedOperatingCompanyDetailRepository = new OperatingCompanyDetailRepositoryNHibernate();
                        break;
                    case PersistenceMechanismEnum.None:
                        // do nothing
                        break;
                }

                return selectedOperatingCompanyDetailRepository;
            }
        }

        #endregion
    }
}
